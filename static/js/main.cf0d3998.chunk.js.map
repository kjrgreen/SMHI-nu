{"version":3,"sources":["logo.svg","WeatherIconComponent.jsx","WeatherComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherIconComponent","props","returnValue","icon","React","cloneElement","size","className","WeatherComponent","this","index","Date","array","validTime","getDay","timeFrame","toString","substring","parameters","find","o","name","values","Component","App","state","data","timeSeries","thisComponent","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","toFixed","longitude","fetch","then","response","json","setState","map","object","length","style","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf0d3998.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport * as Icon from \"weather-icons-react\"; //TODO: Reduce bloat\r\n\r\n/*\r\n1 \tClear sky\r\n2 \tNearly clear sky\r\n3 \tVariable cloudiness\r\n4 \tHalfclear sky\r\n5 \tCloudy sky\r\n6 \tOvercast\r\n7 \tFog\r\n8 \tLight rain showers\r\n9 \tModerate rain showers\r\n10 \tHeavy rain showers\r\n11 \tThunderstorm\r\n12 \tLight sleet showers\r\n13 \tModerate sleet showers\r\n14 \tHeavy sleet showers\r\n15 \tLight snow showers\r\n16 \tModerate snow showers\r\n17 \tHeavy snow showers\r\n18 \tLight rain\r\n19 \tModerate rain\r\n20 \tHeavy rain\r\n21 \tThunder\r\n22 \tLight sleet\r\n23 \tModerate sleet\r\n24 \tHeavy sleet\r\n25 \tLight snowfall\r\n26 \tModerate snowfall\r\n27 \tHeavy snowfall\r\n */\r\n\r\nexport function WeatherIconComponent(props) {\r\n    //TODO: add support for nighttime icons\r\n    let array = [\r\n        \"You should never see this message.\",\r\n        < Icon.WiDaySunny/>,\r\n        < Icon.WiDaySunny/>,\r\n        < Icon.WiDaySunnyOvercast/>,\r\n        < Icon.WiDayCloudy/>,\r\n        < Icon.WiCloud/>,\r\n        < Icon.WiCloudy/>,\r\n        < Icon.WiDayFog/>,\r\n        < Icon.WiRainMix/>,\r\n        < Icon.WiRainWind/>,\r\n        < Icon.WiDayRain/>,\r\n        < Icon.WiThunderstorm/>,\r\n        < Icon.WiDaySleet/>,//Light TODO: Distinguish between these!\r\n        < Icon.WiDaySleet/>,//Moderate\r\n        < Icon.WiDaySleet/>,//Heavy\r\n        < Icon.WiDaySnow/>,//Light TODO: Distinguish between these!\r\n        < Icon.WiDaySnow/>,//Moderate\r\n        < Icon.WiDaySnow/>,//Heavy\r\n        < Icon.WiRainMix/>,\r\n        < Icon.WiRainWind/>,\r\n        < Icon.WiRain/>,\r\n        < Icon.WiDayLightning/>,\r\n        < Icon.WiSleet/>,//Light TODO: Distinguish between these!\r\n        < Icon.WiSleet/>,//Moderate\r\n        < Icon.WiSleet/>,//Heavy\r\n        < Icon.WiSnow/>,\r\n        < Icon.WiSnow/>,\r\n        < Icon.WiSnow/>\r\n    ];\r\n    let returnValue = array[props.icon];\r\n    return (React.cloneElement(returnValue, {size: \"36pt\", className: \"marginAuto\"})); //TODO: Take the size as a prop, somehow make it responsive?\r\n}\r\n\r\nexport default WeatherIconComponent;\r\n","import React, { Component } from 'react';\r\nimport { WeatherIconComponent } from './WeatherIconComponent';\r\nimport * as Icon from \"weather-icons-react\"; //TODO: Reduce bloat\r\n\r\nclass WeatherComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    //Note: the ugly ternary below is best broken out into a new component, or at least a function\r\n    render() {\r\n        return [this.props.index === 0 || new Date(this.props.array[this.props.index-1].validTime).getDay() !== new Date(this.props.timeFrame.validTime).getDay() ? (<div className=\"h1div\"><h1> {new Date(this.props.timeFrame.validTime).toString().substring(0, 10)} </h1></div>) : \"\",\r\n        <div className=\"weatherComponent\">\r\n            <div>\r\n                <div>\r\n                <h2>{new Date(this.props.timeFrame.validTime).toString().substring(16, 21)}</h2>\r\n                </div>\r\n                <div>\r\n                <p>{this.props.timeFrame.parameters.find(o => o.name === 't').values[0]} Â°C</p>\r\n                </div>\r\n                <div>\r\n                    < WeatherIconComponent icon={this.props.timeFrame.parameters.find(o => o.name === 'Wsymb2').values[0]} />\r\n                </div>\r\n            </div>\r\n        </div>];\r\n    }\r\n}\r\n\r\nexport default WeatherComponent;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './'\nimport WeatherComponent from './WeatherComponent.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data: {timeSeries: []}};\n  }\n\n  componentDidMount() {\n    let thisComponent = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(\"Latitude is :\", position.coords.latitude.toFixed(6));\n      console.log(\"Longitude is :\", position.coords.longitude.toFixed(6));\n      console.log(\"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/\" + position.coords.longitude.toFixed(6) + \"/lat/\" + position.coords.latitude.toFixed(6) + \"/data.json\")\n      fetch(\"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/\" + position.coords.longitude.toFixed(6) + \"/lat/\" + position.coords.latitude.toFixed(6) + \"/data.json\")\n          .then(response => response.json())\n          .then(data => thisComponent.setState({data: data}))\n    });\n  }\n\n  render() {\n    return (\n        [\n            this.state.data.timeSeries.map((object, index, array) => <WeatherComponent timeFrame={object} index={index} array={array} />), //HACK: poor separation of concerns, I don't feel it should be the responsibility of the component that displays weather info to display the date and time, even if the weather info is inherenty tied to a time and date\n          this.state.data.timeSeries.length === 0 ? <h1 style={{ marginTop: \"auto\", marginBottom: \"auto\"}}>Please allow location access for accurate weather data through SMHIs API</h1> : \"\"\n        ]\n    );\n  }\n\n  createComponent\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}